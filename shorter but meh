#include <HardwareSerial.h>   //bruh its for an esp32.
#include "Adafruit_FONA.h"    // https://github.com/botletics/SIM7000-LTE-Shield/tree/master/Code ***IT's TIM WOO's
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_FONA.h"

/*************************** FONA Pins ***********************************/
//pin set for lilygo tcallsim7000x and an external ublox6m
#define SIMCOM_7000
#define FONA_PWRKEY 5
#define FONA_RST 4
#define FONA_TX 26 // For GSM
#define FONA_RX 27 
#define TXPin 32 // For GPS module 
#define RXPin 33 
#define SD_MISO     2
#define SD_MOSI     15
#define SD_SCLK     14
#define SD_CS       13
#define LED_PIN     12
#define BAT_ADC     35
#define SOLAR_ADC   36
#define GPSBaud   9600
HardwareSerial fonaSS(1);     //cellular serial connection
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
//Adafruit_FONA_LTE fona = Adafruit_FONA_LTE();  //maybe this one

/************************* Cellular Access Point *********************************/

// Optionally configure a GPRS APN, username, and password.
// You might need to do this to access your network's GPRS/data
// network.  Contact your provider for the exact APN, username,
// and password values.  Username and password are optional and
// can be removed, but APN is required.
#define FONA_APN       "vzwinternet"   //verizon
#define FONA_USERNAME  ""
#define FONA_PASSWORD  ""

/************************* Adafruit.io Setup *********************************/

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883
#define AIO_USERNAME    "usernamehere"
#define AIO_KEY         "aio_keysomethingorother"

/************ Global State (you don't need to change this!) ******************/

// Setup the FONA MQTT class by passing in the FONA class and MQTT server and login details.
Adafruit_MQTT_FONA mqtt(&fona, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

// You don't need to change anything below this line!
#define halt(s) { Serial.println(F( s )); while(1);  }

// FONAconnect is a helper function that sets up the FONA and connects to
// the GPRS network. See the fonahelper.cpp tab above for the source!
boolean FONAconnect(const __FlashStringHelper *apn, const __FlashStringHelper *username, const __FlashStringHelper *password);
void setFonaPowerDownMode(void);
void setFonaWakeUpMode(void);
void checkForNetwork(void);

/****************************** Feeds ***************************************/

// Setup feeds on AdafruitIO for publishing
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname>
Adafruit_MQTT_Publish testytest = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/testytest");


/*************************** Sketch Code ************************************/

int dtrPin = 5;             // Toggles FONA sleep
int test_val = 666;         //number that stands out to test...
float temp;
uint8_t txfailures = 0;     // How many transmission failures in a row we're willing to be ok with before reset?
#define MAXTXFAILURES 3

void setup() {
  // Initialize the FONA module
  while (! FONAconnect(F(FONA_APN), F(FONA_USERNAME), F(FONA_PASSWORD))) {
    // Serial.println("Retrying FONA");
  }
  // Serial.println(F("Connected to Cellular!"));

  delay(5000);                        // Wait 5 seconds to stabilize connection
}

void loop() {
  // Ensure the connection to the MQTT server is alive (this will make the first
  // connection and automatically reconnect when disconnected).
  MQTT_connect();
  delay(50);
  // Publish measured values to AdafruitIO feeds via MQTT packets
  publish_value("test", test_val, testytest);

  // Disconnect MQTT connection
  MQTT_disconnect();

  // Power down FONA
  //setFonaPowerDownMode();
  
  // Wake up FONA
  //setFonaWakeUpMode();
}

/*bool netStatus() {                          ///not used here yet
  int n = fona.getNetworkStatus();
  
  Serial.print(F("Network status ")); Serial.print(n); Serial.print(F(": "));
  if (n == 0) Serial.println(F("Not registered"));
  if (n == 1) Serial.println(F("Registered (home)"));
  if (n == 2) Serial.println(F("Not registered (searching)"));
  if (n == 3) Serial.println(F("Denied"));
  if (n == 4) Serial.println(F("Unknown"));
  if (n == 5) Serial.println(F("Registered roaming"));

  if (!(n == 1 || n == 5)) return false;
  else return true;
}*/

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care of connecting.
void MQTT_connect() {
  int8_t ret;
  int mqtt_count = 0;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  //Serial.print("Connecting to MQTT... ");

  while (((ret = mqtt.connect()) != 0) && (mqtt_count < 5)) { // connect will return 0 for connected
     
    //Serial.println(mqtt.connectErrorString(ret));
    //Serial.println("Retrying MQTT connection in 5 seconds...");
    mqtt.disconnect();
    mqtt_count += 1;
    if (mqtt_count == 5) {
      fona.getNetworkStatus();
      mqtt_count = 0;
    }
  }
  //Serial.println("MQTT connected!");
}


//
void MQTT_disconnect() {
  int8_t ret;
  Serial.println("Disconnecting from MQTT...");
  while ((ret = mqtt.disconnect()) != 0) {
     
    Serial.println("Retrying MQTT disconnection in 5 seconds...");
    
  }
  Serial.println("MQTT disconnected!"); 
}

void publish_value(String sensor_type, float sensor_val, Adafruit_MQTT_Publish &feed_name){
  if (! feed_name.publish(sensor_val)) {
    Serial.println(F("Failed"));
    txfailures++;
  } else {
    Serial.println(F("OK!"));
    txfailures = 0;
  }
   
}

/***************************************************
  Adafruit MQTT Library FONA Example

  Designed specifically to work with the Adafruit FONA
  ----> http://www.adafruit.com/products/1946
  ----> http://www.adafruit.com/products/1963
  ----> http://www.adafruit.com/products/2468
  ----> http://www.adafruit.com/products/2542

  These cellular modules use TTL Serial to communicate, 2 pins are
  required to interface.

  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
 ****************************************************/
